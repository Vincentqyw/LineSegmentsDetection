function elderEdge()
%Run local scale control edge detector on image (Elder & Zucker, 1998)
noise = 1; %estimated SD of pixel noise
imagefile='img.jpg'; %name of image file
maxscale=5; %maximum scale, must be positive integer. Scales increase exponentially from 0.5 to 2^{maxscale-2}.  
edgew=10; %maximum edge blur (distance in pixels between extrema in the 2nd derivative)
conss=1; %boundary condition for scalespace computation.  0 for extension, 1 for no overlap
congrd=0; %boundary condition for derivative computation.  0 for extension, 1 for no overlap
save_v = zeros(0,11); %results to save
view_v = zeros(0,11); %results to view

save_v(1) = 1; %edge map
save_v(2) = 1; %blur map
save_v(3) = 1; %dark map
save_v(4) = 1; %light map
save_v(5) = 0; %gradient magnitude map
save_v(6) = 1; %gradient direction map
save_v(7) = 0; %gradient scale map
save_v(8) = 0; %2nd derivative map
save_v(9) = 0; %2nd derivativ scale map
save_v(10) = 0; %X zero crossing offset
save_v(11) = 0;%Y zero crossing offset

view_v(1) = 0; %edge map
view_v(2) = 0; %blur map
view_v(3) = 0; %dark map
view_v(4) = 0; %light map
view_v(5) = 0; %gradient magnitude map
view_v(6) = 0; %gradient direction map
view_v(7) = 0; %gradient scale map
view_v(8) = 0; %2nd derivative map
view_v(9) = 0; %2nd derivativ scale map
view_v(10) = 0; %X zero crossing offset
view_v(11) = 0;%Y zero crossing offset

%change this path to your own local directory for the filters
filtpath='~/Dropbox/code/elderlab/edge/mar03/filters';

edgetype='.jpg'; %format for output edge map (.mat also allowed)
edgelplotflag=0; %show edges on image
imgplotflag=0; %view original image
outputdir=pwd;

sfilenames = check_save_requirements(view_v,outputdir,edgetype);
subpixelflag=0;

outputdata=main_edge(imagefile,maxscale,noise,edgew,...
                        conss,congrd,view_v,view_v,filtpath,...
                        edgetype,edgelplotflag,imgplotflag,sfilenames,...
                        subpixelflag);
                    
reblur=uint8(imreconandblur(1,3));

img=imread(imagefile);
if size(img,3)==3
    img=rgb2gray(img);
end
imwrite(img,strcat(resultdir,'img.jpg'));
imwrite(outputdata.edge_map,strcat(resultdir,'edge.jpg'));
imwrite(reblur,strcat(resultdir,'recon.jpg'));